#!/usr/bin/env ruby
# frozen_string_literal: true

require "active_support/all"
require "action_view/helpers/number_helper"
require "benchmark"
require "pry"
require "rainbow"
require_relative "../test/rails_kit/setup"
require_relative "../lib/universal_id"
require_relative "../lib/universal_id/contrib/rails"

include ActionView::Helpers::NumberHelper

@iterations = 10
@line_length = 98
@campaign_count = 10
@email_count = 100
@attachment_count = 10

# seed data ..................................................................................................
def campaigns
  @campaigns ||= begin
    Campaign.create_for_test @campaign_count do |c|
      Email.create_for_test @email_count, campaign: c do |email|
        Attachment.create_for_test @attachment_count, email: email
      end
      # load associations into memory so they can be included in the pack or UID
      c.emails.each { |email| email.attachments.load }
    end
  end
end

def prepack_options_with_descendants
  @campaign_prepack_options_with_descendants ||= {
    include_keys: false,
    include_timestamps: false,
    include_unsaved_changes: true,
    include_descendants: true,
    descendant_depth: 2
  }
end

## setup ......................................................................................................
campaign = campaigns.sample
record_count = 1 + campaign.emails.count + Attachment.where(email: campaign.emails).count
campaign_hash = campaign.as_json(include: {emails: {include: :attachments}})
campaign_hash_uid = URI::UID.build(campaign_hash)
campaign_hash_uid_string = campaign_hash_uid.to_s
campaign_uid = URI::UID.build(campaign, include_descendants: true, descendant_depth: 1)
campaign_uid_string = campaign_uid.to_s
campaign_prepacked_with_descendants = UniversalID::Prepacker.prepack(campaign, prepack_options_with_descendants)
campaign_packed_with_descendants = UniversalID::MessagePackFactory.msgpack_pool.dump(campaign_prepacked_with_descendants)

# runner .....................................................................................................
def run(label, iterations: @iterations, line_length: @line_length)
  Benchmark.benchmark Benchmark::CAPTION, 52, Benchmark::FORMAT, "Average" do |x|
    time = x.report(label) { iterations.times { yield } }
    [time / iterations.to_f]
  end
  puts Rainbow("".ljust(line_length, ".")).cyan.faint
end

# benchmarks .................................................................................................
puts Rainbow("".ljust(@line_length, "=")).cyan.faint
print Rainbow("Benchmarking ").cyan
print Rainbow(number_with_delimiter(@iterations)).lime
print Rainbow(" #{"iteration".pluralize(@iterations)} ").cyan
print Rainbow("with ").cyan
print Rainbow(number_with_delimiter(record_count)).lime
puts Rainbow(" related records marshaled as an atomic singular unit").cyan
puts Rainbow("".ljust(@line_length, "=")).cyan.faint

run("UID.build Hash") { URI::UID.build campaign_hash }
run("UID.build Hash, exclude_blank") { URI::UID.build campaign_hash, include_blank: false }
run("UID.parse Hash[String]") { URI::UID.parse campaign_hash_uid_string }
run("UID.decode Hash") { campaign_hash_uid.decode }
run("UID.build ActiveRecord") { URI::UID.build campaign }
run("UID.build ActiveRecord, exclude_blank") { URI::UID.build campaign, include_blank: false }
run("UID.build ActiveRecord") { URI::UID.build campaign, include_descendants: true, descendant_depth: 2 }
run("UID.parse ActiveRecord[String]") { URI::UID.parse campaign_uid_string }
run("UID.decode ActiveRecord") { campaign_uid.decode }

run("UID → GID → UID.from_gid → UID.decode") do
  URI::UID.from_gid(URI::UID.build(campaign, include_descendants: true, descendant_depth: 2).to_gid_param).decode
end

run("UID → SGID → UID.from_sgid → UID.decode") do
  URI::UID
    .from_sgid(URI::UID.build(campaign, include_descendants: true, descendant_depth: 2)
    .to_sgid_param(for: "benchmarks"), for: "benchmarks").decode
end

run "prepack ActiveRecord" do
  UniversalID::Prepacker.prepack campaign, prepack_options_with_descendants
end

run "msgpack.dump prepacked" do
  UniversalID::MessagePackFactory.msgpack_pool.dump campaign_prepacked_with_descendants
end

run "prepack → msgpack.dump" do
  prepacked = UniversalID::Prepacker.prepack(campaign, prepack_options_with_descendants)
  UniversalID::MessagePackFactory.msgpack_pool.dump prepacked
end

run "msgpack.load packed" do
  UniversalID::MessagePackFactory.msgpack_pool.load campaign_packed_with_descendants
end
